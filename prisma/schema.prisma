generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Author {
  idAuthor    Int     @id @default(autoincrement()) @map("id_author")
  name        String  @db.VarChar(40)
  lastname    String  @db.VarChar(40)
  affiliation String? @db.VarChar(40)
  idWork      Int     @map("id_work")

  // Relación
  work Work @relation(fields: [idWork], references: [idWork], onDelete: Cascade, onUpdate: NoAction, map: "fk_author_works")

  @@map("author")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model User {
  idUser    Int      @id @default(autoincrement()) @map("id_user")
  name      String   @db.VarChar(40)
  lastname  String   @db.VarChar(40)
  email     String   @unique @db.VarChar(40)
  password  String   @db.VarChar(40)
  job       String?  @db.VarChar(50)
  specialty String?  @db.VarChar(40)
  admin     Boolean? @default(false)
  age       Int?
  gender    String?  @map("gender")

  // Relación
  works Work[]

  @@map("user")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Work {
  idWork      Int     @id @default(autoincrement()) @map("id_work")
  category    String? @db.VarChar(50)
  description String?
  idUser      Int     @map("id_user")
  workCode    String? @unique @map("work_code") @db.VarChar(20)
  title       String? @db.VarChar(40)
  file        String? @db.VarChar(255)

  // Relaciones
  authors Author[]
  user    User     @relation(fields: [idUser], references: [idUser], onDelete: Cascade, onUpdate: NoAction, map: "fk_works_user")

  @@map("works")
}
